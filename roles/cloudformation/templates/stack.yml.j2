AWSTemplateFormatVersion: "2010-09-09"
Description: Simple EC2 which has port web and ssh port open
Parameters:
  VpcCidr:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Default: "{{VpcCidr}}"
  AMI:
    Type: String
    Default: "{{ec2_ami}}"
    Description: The Linux AMI to use.
  AvailabilityZone:
    Description: select the availability zone
    Type: String
    Default: "{{aws_region}}"
  InstanceType:
    Description: Select the ec2 instance type
    Type: String
    Default: "{{ec2_instance_type}}"
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  # Key:
  #   Type: String
  #   Description: The key used to access the instance.

Resources:

  MyVpc:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref 'VpcCidr'
      EnableDnsHostnames: True
      EnableDnsSupport: True
      Tags:
        - Key: 'Name'
          Value: "{{ec2_instance_name}}"
        - Key: 'Env'
          Value: "{{env}}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: MyVpc
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !Ref VpcCidr, 12, 8 ] ]
      VpcId: !Ref MyVpc
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Tags:
        - Key: 'Name'
          Value: "public-subnet01-{{env}}"
        - Key: 'Env'
          Value: "{{env}}"
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # without this section internet gateway interface is not created
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH and web traffic in, all traffic out."
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp:  0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp:  0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp:  0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  myInstances:
    Type: 'AWS::EC2::Instance'
    Properties:
      SubnetId: !Ref PublicSubnet1
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      # make sure this keypair exists on AWS in EC2 section
      # .pem file is downloaded
      KeyName: "{{ec2_key_name}}"
      # SecurityGroupIds:
      #   - Ref InstanceSecurityGroup
      SecurityGroupIds: [{ "Fn::GetAtt" : ["InstanceSecurityGroup", "GroupId"] }]

      Tags:
        - Key: Name
          Value: "{{ec2_instance_name}}"


Outputs:
  PublicIp:
    Value:
      Fn::GetAtt:
        - myInstances
        - PublicIp
    Description: Server's PublicIp Address


# aws cloudformation create-stack --stack-name x80-devstack --template-body file://x80dev_ec2.yaml --parameters file://cf_env.json
# aws cloudformation delete-stack --stack-name x80-devstack
